// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/dark-mode-manager.js
var DarkModeManager = class _DarkModeManager {
  constructor() {
    this.darkMode = false;
    this.lightIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sun-fill" viewBox="0 0 16 16"><path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0m9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708"/></svg>';
    this.darkIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-moon-stars-fill" viewBox="0 0 16 16"><path d="M6 .278a.77.77 0 0 1 .08.858 7.2 7.2 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277q.792-.001 1.533-.16a.79.79 0 0 1 .81.316.73.73 0 0 1-.031.893A8.35 8.35 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.75.75 0 0 1 6 .278"/><path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.73 1.73 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.73 1.73 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.73 1.73 0 0 0 1.097-1.097zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.16 1.16 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.16 1.16 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732z"/></svg>';
    this.toggles = document.querySelectorAll(".dark-mode-toggle");
    this.container = document.documentElement;
    this._addEventListeners();
    this.initDarkMode();
  }
  initDataset() {
    if (this.darkMode) {
      this.container.dataset.theme = "dark";
    } else {
      this.container.dataset.theme = "light";
    }
  }
  initDarkMode() {
    this.darkMode = localStorage.getItem("darkMode") === "true";
    this.initDataset();
    this.initIcons();
  }
  initIcons() {
    if (this.toggles) {
      this.toggles.forEach((toggler) => {
        toggler.innerHTML = this.darkMode ? this.lightIcon : this.darkIcon;
      });
    }
  }
  // Toggle dropdown visibility
  toggle() {
    this.darkMode = !this.darkMode;
    localStorage.setItem("darkMode", this.darkMode);
    this.initDataset();
    this.initIcons();
  }
  // Add necessary event listeners
  _addEventListeners() {
    if (this.toggles) {
      this.toggles.forEach((toggler) => {
        toggler.addEventListener("click", (evt) => {
          evt.preventDefault();
          this.toggle();
        });
      });
    }
  }
  static init() {
    return new _DarkModeManager();
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/rtl-toggler.js
var RtlToggler = class _RtlToggler {
  constructor(element) {
    this.dir = localStorage.getItem("dir") === "rtl" ? "rtl" : "ltr";
    this.element = element;
    this.html = document.documentElement;
    this.element.innerHTML = this.label;
    this.initialize();
  }
  get label() {
    return this.dir === "rtl" ? "ltr" : "rtl";
  }
  initialize() {
    this.element.classList.add("inited");
    this.html.dir = this.dir;
    this.element.addEventListener("click", (e) => this.toggle(e));
  }
  // Toggle direction
  toggle(e) {
    e.preventDefault();
    this.dir = this.dir === "rtl" ? "ltr" : "rtl";
    localStorage.setItem("dir", this.dir);
    this.html.dir = this.dir;
    this.element.innerHTML = this.label;
  }
  static create(element) {
    if (!element.classList.contains("inited")) {
      new _RtlToggler(element);
    }
  }
  static init() {
    document.querySelectorAll(".rtl-toggle").forEach((element) => {
      _RtlToggler.create(element);
    });
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/dropdown.js
var Dropdown = class _Dropdown {
  constructor(element) {
    this.element = element;
    this.toggle = element.querySelector(".dropdown-toggle");
    this.menu = element.querySelector(".dropdown-menu");
    this.initialize();
  }
  initialize() {
    this.element.classList.add("inited");
    this.toggle.addEventListener("click", (e) => this.toggleMenu(e));
    document.addEventListener("click", (e) => this.closeOnOutsideClick(e));
    document.addEventListener("keydown", (e) => this.closeOnEsc(e));
  }
  toggleMenu(e) {
    e.preventDefault();
    e.stopPropagation();
    this.menu.classList.toggle("show");
  }
  closeOnOutsideClick(e) {
    if (!this.element.contains(e.target)) {
      this.menu.classList.remove("show");
    }
  }
  closeOnEsc(e) {
    if (e.key === "Escape") {
      this.menu.classList.remove("show");
    }
  }
  static create(dropdown) {
    if (!dropdown.classList.contains("inited")) {
      new _Dropdown(dropdown);
    }
  }
  static init() {
    document.querySelectorAll(".dropdown").forEach((dropdown) => {
      _Dropdown.create(dropdown);
    });
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/navbar.js
var NavBar = class _NavBar {
  constructor(navbar) {
    this.navbar = navbar;
    navbar.classList.add("inited");
    this.toggleButton = navbar.querySelector(".navbar-toggle");
    this.collapse = navbar.querySelector(".navbar-collapse");
    this._addEventListeners();
  }
  toggle() {
    if (this.collapse.classList.contains("show")) {
      this.hide();
    } else {
      this.show();
    }
  }
  show() {
    if (this.collapse) {
      this.collapse.classList.add("show");
    }
  }
  hide() {
    if (this.collapse) {
      this.collapse.classList.remove("show");
    }
  }
  // Add necessary event listeners
  _addEventListeners() {
    if (this.toggleButton) {
      this.toggleButton.addEventListener("click", (event) => {
        event.preventDefault();
        this.toggle();
      });
      this.toggleButton.addEventListener("keydown", (event) => {
        if (event.key === "Escape") {
          this.hide();
        }
      });
    }
  }
  static create(navbar) {
    if (!navbar.classList.contains("inited")) {
      new _NavBar(navbar);
    }
  }
  static init() {
    document.querySelectorAll(".navbar").forEach((navbar) => {
      _NavBar.create(navbar);
    });
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/offcanvas.js
var Offcanvas = class _Offcanvas {
  constructor(offcanvas) {
    this.offcanvas = offcanvas;
    this.offcanvas.classList.add("inited");
    this.id = this.offcanvas.id;
    this.toggles = document.querySelectorAll(`[data-fg-toggle="offcanvas"][data-fg-target="#${this.id}"]`);
    this.closeButton = this.offcanvas.querySelector(".offcanvas-close");
    this._addEventListeners();
  }
  // Toggle offcanvas visibility
  toggle() {
    if (this.offcanvas.classList.contains("show")) {
      this.hide();
    } else {
      this.hideAll();
      this.show();
    }
  }
  // Show the offcanvas
  show() {
    this.offcanvas.classList.add("show");
    document.addEventListener("click", this._handleOutsideClick.bind(this), true);
  }
  // Hide the offcanvas
  hide() {
    this.offcanvas.classList.remove("show");
    document.removeEventListener("click", this._handleOutsideClick.bind(this), true);
  }
  // Hide all open offcanvass
  hideAll() {
    const openoffcanvass = document.querySelectorAll(".offcanvas.show");
    if (openoffcanvass) {
      openoffcanvass.forEach((offcanvas) => {
        offcanvas.classList.remove("show");
      });
    }
  }
  _togglesHasEventTarget(event) {
    return Array.from(this.toggles).some((toggle) => toggle.contains(event.target));
  }
  // Event listener for clicks outside the offcanvas
  _handleOutsideClick(event) {
    if (!this.offcanvas.contains(event.target) && !this._togglesHasEventTarget(event)) {
      this.hide();
    }
  }
  // Add necessary event listeners
  _addEventListeners() {
    if (this.toggles) {
      this.toggles.forEach((toggle) => {
        toggle.addEventListener("click", (event) => {
          event.preventDefault();
          this.toggle();
        });
      });
    }
    if (this.closeButton) {
      this.closeButton.addEventListener("click", (event) => {
        event.preventDefault();
        this.hide();
      });
    }
  }
  static create(offcanvas) {
    if (!offcanvas.classList.contains("inited")) {
      new _Offcanvas(offcanvas);
    }
  }
  static init() {
    document.querySelectorAll(".offcanvas").forEach((offcanvas) => {
      _Offcanvas.create(offcanvas);
    });
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/tooltip.js
var Tooltip = class _Tooltip {
  constructor() {
    this.tooltip = null;
    this.currentTarget = null;
    this.initialize();
  }
  initialize() {
    this.createTooltip();
    this.bindEvents();
    this.addResizeListener();
    this.addScrollListener();
  }
  createTooltip() {
    this.tooltip = document.createElement("div");
    this.tooltip.classList.add("tooltip");
    document.body.appendChild(this.tooltip);
  }
  bindEvents() {
    document.addEventListener("mouseover", this.handleMouseOver.bind(this));
    document.addEventListener("mouseout", this.handleMouseOut.bind(this));
  }
  addResizeListener() {
    let resizeTimer;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => this.hideTooltip(), 100);
    });
  }
  addScrollListener() {
    window.addEventListener("scroll", () => {
      if (this.currentTarget && this.tooltip.classList.contains("show")) {
        this.showTooltip(this.currentTarget);
      }
    }, true);
  }
  handleMouseOver(e) {
    const target = e.target.closest("[data-tooltip]");
    if (!target || !this.tooltip) return;
    this.currentTarget = target;
    this.showTooltip(target);
  }
  handleMouseOut(e) {
    const target = e.target.closest("[data-tooltip]");
    if (!target || !this.tooltip) return;
    this.currentTarget = null;
    this.hideTooltip();
  }
  showTooltip(target) {
    const text = target.dataset.tooltip;
    const direction = target.dataset.tooltipDirection || "bottom";
    this.tooltip.textContent = text;
    this.tooltip.className = `tooltip tooltip-${direction}`;
    const targetRect = target.getBoundingClientRect();
    const tooltipRect = this.tooltip.getBoundingClientRect();
    const position = this.calculatePosition(targetRect, tooltipRect, direction);
    console.log(position);
    this.tooltip.style.left = `${position.x}px`;
    this.tooltip.style.top = `${position.y}px`;
    requestAnimationFrame(() => {
      this.tooltip.classList.add("show");
    });
  }
  calculatePosition(targetRect, tooltipRect, direction) {
    const scrollX = window.scrollX;
    const scrollY = window.scrollY;
    const offset = 8;
    const isRTL = document.documentElement.getAttribute("dir") === "rtl";
    switch (direction) {
      case "top":
        return {
          x: targetRect.left + targetRect.width / 2 - tooltipRect.width / 2 + scrollX,
          y: targetRect.top - tooltipRect.height - offset + scrollY
        };
      case "bottom":
        return {
          x: targetRect.left + targetRect.width / 2 - tooltipRect.width / 2 + scrollX,
          y: targetRect.bottom + offset + scrollY
        };
      case "start":
        return {
          x: isRTL ? targetRect.right + offset + scrollX : targetRect.left - tooltipRect.width - offset + scrollX,
          y: targetRect.top + targetRect.height / 2 - tooltipRect.height / 2 + scrollY
        };
      case "end":
        return {
          x: isRTL ? targetRect.left - tooltipRect.width - offset + scrollX : targetRect.right + offset + scrollX,
          y: targetRect.top + targetRect.height / 2 - tooltipRect.height / 2 + scrollY
        };
      default:
        return { x: 0, y: 0 };
    }
  }
  hideTooltip() {
    this.tooltip.classList.remove("show");
  }
  static init() {
    if (typeof window !== "undefined") {
      if (!window.Tooltip) {
        window.Tooltip = new _Tooltip();
      }
    }
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/modal.js
var Modal = class _Modal {
  constructor() {
    this.modal = null;
    this.backdrop = null;
    this.initialize();
  }
  initialize() {
    this.createBackdrop();
    this.bindEvents();
  }
  createBackdrop() {
    this.backdrop = document.querySelector(".modal-backdrop") || this.createNewBackdrop();
  }
  createNewBackdrop() {
    const backdrop = document.createElement("div");
    backdrop.className = "modal-backdrop";
    backdrop.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background-color: #000;
            opacity: 0.5;
            z-index: 40;
            display: none;
        `;
    document.body.appendChild(backdrop);
    return backdrop;
  }
  bindEvents() {
    document.addEventListener("click", this.handleToggle.bind(this));
  }
  handleToggle(event) {
    if (event.target.dataset.fgToggle === "modal") {
      const modalHash = event.target.dataset.fgTarget;
      if (typeof modalHash === "string") {
        const id = modalHash.substring(1);
        if (id) {
          const modal = document.getElementById(id);
          if (modal) {
            this.modal = modal;
            this.toggle();
          }
        }
      }
    }
  }
  show() {
    this.modal.classList.add("show");
    this.backdrop.classList.add("show");
    this.backdrop.style.display = "block";
    document.addEventListener("click", this.handleOutsideClick.bind(this), true);
    this.handleDismiss();
  }
  hide() {
    this.modal.classList.remove("show");
    this.backdrop.classList.remove("show");
    this.backdrop.style.display = "none";
    document.removeEventListener("click", this.handleOutsideClick.bind(this), true);
  }
  toggle() {
    if (this.modal.classList.contains("show")) {
      this.hide();
    } else {
      this.show();
    }
  }
  handleDismiss() {
    const closeButtons = this.modal.querySelectorAll("[data-fg-dismiss=modal]");
    if (closeButtons) {
      closeButtons.forEach((button) => {
        button.addEventListener("click", () => this.hide());
      });
    }
  }
  handleOutsideClick(event) {
    if (!this.modal.contains(event.target) && !this.modal.classList.contains("static-backdrop")) {
      this.hide();
    }
  }
  static init() {
    if (typeof window !== "undefined" && !window.Modal) {
      window.Modal = new _Modal();
    }
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/button-backtop.js
var ButtonBackTop = class _ButtonBackTop {
  constructor(button) {
    this.button = button;
    this.initialize();
  }
  addListeners() {
    document.addEventListener("scroll", () => this.toggle());
    this.button.addEventListener("click", (e) => this.onBacktopClicked(e));
  }
  onBacktopClicked(e) {
    e.preventDefault();
    console.log("onBacktopClicked");
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  }
  toggle() {
    if (document.documentElement.scrollTop > 100) {
      this.button.classList.add("show");
    } else {
      this.button.classList.remove("show");
    }
  }
  initialize() {
    this.addListeners();
    this.toggle();
  }
  static create(button) {
    if (!button.classList.contains("inited")) {
      new _ButtonBackTop(button);
      button.classList.add("inited");
    }
  }
  static init() {
    document.querySelectorAll(".btn-backtop").forEach((button) => {
      _ButtonBackTop.create(button);
    });
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/password-toggle.js
var PasswordToggle = class _PasswordToggle {
  constructor(input) {
    if (input.classList.contains("password-toggle-inited")) {
      return;
    }
    this.container = null;
    this.input = input;
    this.hideIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16"><path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7 7 0 0 0 2.79-.588M5.21 3.088A7 7 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474z"/><path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z"/></svg>';
    this.showIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16"><path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"/><path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"/></svg>';
    this._createContainer();
    this._createButton();
    this._addEventListeners();
  }
  _createContainer() {
    if (!this.input.parentNode.classList.contains("form-control-container")) {
      const input = this.input;
      input.classList.add("has-end-icon");
      const container = document.createElement("div");
      container.classList.add("form-control-container");
      input.parentNode.replaceChild(container, input);
      container.appendChild(input);
      this.input = input;
      this.container = container;
    } else {
      this.container = this.input.parentNode;
    }
  }
  _createButton() {
    const button = document.createElement("button");
    button.type = "button";
    button.className = "end-icon btn-password-toggle";
    button.innerHTML = this.showIcon;
    this.button = button;
    this.container.appendChild(button);
    this.input.classList.add("password-toggle-inited");
  }
  _addEventListeners() {
    this.button.addEventListener("click", (e) => this.toggle(e));
  }
  toggle(e) {
    e.preventDefault();
    this.input.type = this.input.type === "password" ? "text" : "password";
    this.button.innerHTML = this.input.type === "password" ? this.showIcon : this.hideIcon;
  }
  static init() {
    document.querySelectorAll("input[type=password]").forEach((input) => {
      new _PasswordToggle(input);
    });
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/tabs.js
var Tabs = class _Tabs {
  constructor(element) {
    this.currentId = null;
    this.element = element;
    this.buttons = this.element.querySelectorAll("[role=tab]");
    this.tabs = this.element.querySelectorAll("[role=tabpanel]");
    this._initFirstTab();
    this._addListeners();
    this.element.classList.add("inited");
  }
  _initFirstTab() {
    const firstTabButton = this.buttons[0];
    if (firstTabButton) {
      const id = firstTabButton.getAttribute("aria-controls");
      if (id) {
        this.currentId = id;
        this._toggle();
      }
    }
  }
  _toggle() {
    this.buttons.forEach((button) => {
      if (button.getAttribute("aria-controls") === this.currentId) {
        button.classList.add("active");
      } else {
        button.classList.remove("active");
      }
    });
    this.tabs.forEach((tab) => {
      if (tab.id == this.currentId) {
        tab.classList.add("active");
      } else {
        tab.classList.remove("active");
      }
    });
  }
  _addListeners() {
    this.buttons.forEach((button) => {
      button.addEventListener("click", (e) => this._onButtonClick(e));
    });
  }
  _onButtonClick(e) {
    e.preventDefault();
    const tabId = e.target.getAttribute("aria-controls");
    if (typeof tabId !== "undefined") {
      this.currentId = tabId;
      this._toggle();
    }
  }
  static init() {
    document.querySelectorAll("[role=tablist]").forEach((tabs) => {
      if (!tabs.classList.contains("inited")) {
        new _Tabs(tabs);
      }
    });
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/toast.js
var Toast = class _Toast {
  constructor(message, options = {}) {
    this.options = Object.assign({}, {
      type: "info",
      position: "top-end",
      timeout: 5e3
    }, options);
    this.message = message;
    this.toastContainer = document.getElementById(`toast-container-${this.options.position}`);
    if (!this.toastContainer) {
      this.createToastContainer();
    }
  }
  createToastContainer() {
    this.toastContainer = document.createElement("div");
    this.toastContainer.id = `toast-container-${this.options.position}`;
    this.toastContainer.classList.add("toast-container", this.options.position, this.options.type);
    document.body.appendChild(this.toastContainer);
  }
  show() {
    const toast = document.createElement("div");
    toast.classList.add("toast", `toast-${this.options.type}`);
    toast.role = "alert";
    toast.ariaLive = "assertive";
    toast.ariaAtomic = "true";
    const closeButton = document.createElement("a");
    closeButton.href = "#!";
    closeButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16"><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/></svg>';
    closeButton.addEventListener("click", function(evt) {
      evt.preventDefault();
      toast.remove();
    });
    toast.innerHTML = `<div class="grow">${this.message}</div>`;
    toast.appendChild(closeButton);
    this.toastContainer.appendChild(toast);
    setTimeout(() => {
      toast.remove();
    }, this.options.timeout);
  }
  static make(message, options) {
    const toast = new _Toast(message, options);
    toast.show();
    return toast;
  }
  static success(message, position) {
    _Toast.make(message, { type: "success", position });
  }
  static error(message, position) {
    _Toast.make(message, { type: "error", position });
  }
  static info(message, position) {
    _Toast.make(message, { type: "info", position });
  }
  static warning(message, position) {
    _Toast.make(message, { type: "warning", position });
  }
};

// node_modules/.pnpm/fadgram-ui@0.9.3_tailwindcss@4.1.15/node_modules/fadgram-ui/js/index.js
var initFadgramUI = () => {
  DarkModeManager.init();
  RtlToggler.init();
  ButtonBackTop.init();
  Dropdown.init();
  NavBar.init();
  Offcanvas.init();
  Tooltip.init();
  Modal.init();
  PasswordToggle.init();
  Tabs.init();
  window.Toast = Toast;
};
document.addEventListener("DOMContentLoaded", () => {
  initFadgramUI();
});
export {
  initFadgramUI
};
//# sourceMappingURL=fadgram-ui.js.map
